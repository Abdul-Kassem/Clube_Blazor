@page "/Dependentes/Edit/{id:int}"
@using Blazor_Clube.Models
@using System.Text.Json.Nodes
@inject HttpClient Http
@inject NavigationManager navManager

<div class="row">
    <div class="col-lg-8">
        <h1 class="mb-5">Editar Dependente</h1>

        @if (dependente == null)
        {
            <p><em>Carregando...</em></p>
        }
        else
        {
            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Nome</label>
                <div class="col-md-8">
                    <input class="form-control" @bind="DependenteData.Nome" />
                    <span class="text-danger">@Erros["Nome"]?[0]</span>
                </div>
            </div>

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Cpf</label>
                <div class="col-md-8">
                    <input class="form-control"
                           @bind="DependenteData.CPF"
                           @oninput="FormatarCPF" />
                    <span class="text-danger">@Erros["Cpf"]?[0]</span>
                </div>
            </div>

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">RegistroGeral</label>
                <div class="col-md-8">
                    <input class="form-control"
                           @bind="DependenteData.RG"
                           @oninput="FormatarRegistroGeral" />
                    <span class="text-danger">@Erros["RegistroGeral"]?[0]</span>
                </div>
            </div>

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Data de Nascimento</label>
                <div class="col-md-8">
                    <input class="form-control"
                           @bind="DependenteData.DataNascimento"
                           @oninput="FormatarDataNascimento" />
                    <span class="text-danger">@Erros["Data de Nascimento"]?[0]</span>
                </div>
            </div>

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Tipo de Vinculo</label>
                <div class="col-md-8">
                    <input class="form-control" @bind="DependenteData.TipoVinculo" />
                    <span class="text-danger">@Erros["Tipo de Vinculo"]?[0]</span>
                </div>
            </div>

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Socio Titular</label>
                <div class="col-md-8">
                    <input class="form-control" @bind="DependenteData.SocioTitular_Associado" />
                    <span class="text-danger">@Erros["Socio Titular"]?[0]</span>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-4 col-md-4 d-grid">
                    <button class="btn btn-primary" @onclick="SaveDependente">Submit</button>
                </div>
                <div class="col-md-4 d-grid">
                    <a class="btn btn-outline-primary" href="/Dependentes">Cancelar</a>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public int Id { set; get; }
    public Dependente? dependente = null;
    public DependenteDto DependenteData { set; get; } = new();
    public JsonNode Erros { set; get; } = new JsonObject();

    private void FormatarCPF(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? string.Empty;
        input = new string(input.Where(char.IsDigit).ToArray());

        if (input.Length > 9)
            input = input.Insert(9, "-");
        if (input.Length > 6)
            input = input.Insert(6, ".");
        if (input.Length > 3)
            input = input.Insert(3, ".");

        DependenteData.CPF = input;
    }

    private void FormatarRegistroGeral(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? string.Empty;
        input = new string(input.Where(char.IsDigit).ToArray()); // Keep only digits

        if (input.Length > 11)
            input = input.Substring(0, 11); // Limit the input to 11 digits (XXX.XXX.XXX-X format)

        // Add the dots and hyphen at the correct positions
        if (input.Length > 8)
            input = input.Insert(8, "-"); // Insert the hyphen after the 9th digit
        if (input.Length > 6)
            input = input.Insert(5, "."); // Insert the first dot after the 6th digit
        if (input.Length > 3)
            input = input.Insert(2, "."); // Insert the second dot after the 3rd digit

        DependenteData.RG = input;
    }



    private void FormatarDataNascimento(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? string.Empty;
        input = new string(input.Where(char.IsDigit).ToArray());

        if (input.Length > 4)
            input = input.Insert(4, "/");
        if (input.Length > 2)
            input = input.Insert(2, "/");

        if (input.Length > 10) // Limita ao formato DD/MM/AAAA
            input = input.Substring(0, 10);

        DependenteData.DataNascimento = input;
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            dependente = await Http.GetFromJsonAsync<Dependente>("https://localhost:4000/api/Dependentes/" + Id);
            DependenteData.Nome = dependente?.Nome ?? "";
            DependenteData.CPF = dependente?.CPF ?? "";
            DependenteData.RG = dependente?.RG?? "";
            DependenteData.DataNascimento = dependente?.DataNascimento ?? "";
            DependenteData.TipoVinculo = dependente?.TipoVinculo ?? "";
            DependenteData.SocioTitular_Associado = dependente?.SocioTitular_Associado ?? "";
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception: " + ex.Message);
        }
    }

    protected async Task SaveDependente()
    {
        var response = await Http.PutAsJsonAsync("https://localhost:4000/api/Dependentes/" + Id, DependenteData);
        if (response.IsSuccessStatusCode)
        {
            navManager.NavigateTo("/Dependentes");
        }
        else
        {
            var strResponse = await response.Content.ReadAsStringAsync();
            try
            {
                var jsonResponse = JsonNode.Parse(strResponse);
                Erros = jsonResponse?["erros"] ?? new JsonObject();
            }
            catch (Exception ex)
            {
            }
        }
    }
}
